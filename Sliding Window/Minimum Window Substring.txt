a typical sliding window problem where we have to find if one string exists in another string as its subset or not and then further find the minimum subset in the lager string containing the previos string
So we divide the question into 2 parts
1. we have to ensure that the given string contains the other string  as well 
2. next we ensur etht the substring containng the previoous subdtring is smallest

class Solution {
public:
    string minWindow(string s, string t) {
        //1. edge case the string s shpuld be bigger than string t
        int n = s.length();
        int m = t.length();
        string ans ="";
        if(n<m)
        {
            return ans;
        }
        unordered_map<char, int> mp2;
        for(int i =0;i<m;i++)
        {
            mp2[t[i]]++;
        }
        int mini = INT_MAX;
        int i =0, j =0;
        int count = mp2.size();
        while(j<n)
        {
            if(mp2.find(s[j])!=mp2.end())
            {
                mp2[s[j]]--;
                if(mp2[s[j]]==0)
                {
                    count--;
                }
            }
            while(count==0)
            {
                if(mini>j-i+1)
                {
                    mini= min(mini, j-i+1);
                    ans = s.substr(i , j-i+1);
                }
                if(mp2.find(s[i])!=mp2.end())
                {
                     mp2[s[i]]++;
                    if (mp2[s[i]] == 1)
                    {
                        count++;
                    }
                }
                i++;
            }
            j++;
        }
        
        return ans;
    }
};
